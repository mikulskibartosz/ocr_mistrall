###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Optional, TypeVar, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class AcceptanceCriteria(BaseModel):
    deliverables: List[str]

class Contact(BaseModel):
    name: Optional[str] = None
    title: Optional[str] = None
    email: Optional[str] = None

class Contract(BaseModel):
    subject: Optional[str] = None
    date: Optional[str] = None
    parties: List["Party"]
    related_agreements: List["RelatedAgreement"]
    scope_of_work: Optional["ScopeOfWork"] = None
    net_value: Optional[Union[str, float]] = None
    currency: Optional[str] = None
    contract_name: Optional[str] = None

class CostStructure(BaseModel):
    work_stream: Optional[str] = None
    duration: Optional[str] = None
    resources: Optional[str] = None
    rate: Optional[str] = None

class DurationAndTermination(BaseModel):
    start_date: Optional[str] = None
    end_condition: Optional[str] = None

class Party(BaseModel):
    name: Optional[str] = None
    role: Optional[str] = None
    contact: Optional["Contact"] = None

class PaymentTerms(BaseModel):
    due_date: Optional[str] = None

class PricingModel(BaseModel):
    cost_structure: List["CostStructure"]
    payment_terms: Optional["PaymentTerms"] = None

class ProjectPlanAndMilestones(BaseModel):
    start_date: Optional[str] = None
    end_date: Optional[str] = None

class RelatedAgreement(BaseModel):
    type: Optional[str] = None
    date: Optional[str] = None

class Role(BaseModel):
    role: Optional[str] = None
    responsibilities: List[str]

class ScopeOfWork(BaseModel):
    services: Optional["Services"] = None
    project_plan_and_milestones: Optional["ProjectPlanAndMilestones"] = None
    place_of_performance: Optional[str] = None
    pricing_model: Optional["PricingModel"] = None
    acceptance_criteria: Optional["AcceptanceCriteria"] = None
    duration_and_termination: Optional["DurationAndTermination"] = None
    miscellaneous_provisions: Optional[str] = None

class Services(BaseModel):
    work_stream: Optional["WorkStream"] = None
    roles: List["Role"]
    total_resources: Optional[str] = None

class WorkStream(BaseModel):
    major_tasks: List[str]
    deliverables: List[str]
