###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class AcceptanceCriteria(BaseModel):
    deliverables: List[str]

class Contact(BaseModel):
    name: str
    title: Optional[str] = None
    email: Optional[str] = None

class Contract(BaseModel):
    subject: str
    date: Optional[str] = None
    parties: List["Party"]
    related_agreements: List["RelatedAgreement"]
    scope_of_work: "ScopeOfWork"
    net_value: Union[str, float]
    currency: Optional[str] = None
    contract_name: Optional[str] = None

class CostStructure(BaseModel):
    work_stream: Optional[str] = None
    duration: Optional[str] = None
    resources: Optional[str] = None
    rate: Optional[str] = None

class DurationAndTermination(BaseModel):
    start_date: Optional[str] = None
    end_condition: Optional[str] = None

class Party(BaseModel):
    name: str
    role: str
    contact: Optional["Contact"] = None

class PaymentTerms(BaseModel):
    due_date: Optional[str] = None

class PricingModel(BaseModel):
    cost_structure: List["CostStructure"]
    payment_terms: "PaymentTerms"

class ProjectPlanAndMilestones(BaseModel):
    start_date: Optional[str] = None
    end_date: Optional[str] = None

class RelatedAgreement(BaseModel):
    type: str
    date: Optional[str] = None

class Role(BaseModel):
    role: str
    responsibilities: List[str]

class ScopeOfWork(BaseModel):
    services: "Services"
    project_plan_and_milestones: "ProjectPlanAndMilestones"
    place_of_performance: Optional[str] = None
    pricing_model: "PricingModel"
    acceptance_criteria: "AcceptanceCriteria"
    duration_and_termination: "DurationAndTermination"
    miscellaneous_provisions: Optional[str] = None

class Services(BaseModel):
    work_stream: "WorkStream"
    roles: List["Role"]
    total_resources: Optional[str] = None

class WorkStream(BaseModel):
    major_tasks: List[str]
    deliverables: List[str]
